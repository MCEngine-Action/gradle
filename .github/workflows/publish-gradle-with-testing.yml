name: Manual Publish to GitHub Packages

on:
  workflow_dispatch:
    inputs:
      repo-name:
        description: 'Repository (owner/name) that owns the package (for env/metadata use)'
        required: true
        type: string
      ref:
        description: 'Branch or tag to publish from'
        required: false
        default: 'master'
        type: string

permissions:
  contents: write   # create tags & releases
  packages: write   # publish to GitHub Packages

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          token: ${{ secrets.USER_GITHUB_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Set up Gradle (fallback if no wrapper)
        uses: gradle/actions/setup-gradle@v3

      - name: Ensure we are on latest ${{ inputs.ref }}
        run: |
          git fetch origin
          git reset --hard "origin/${{ inputs.ref }}"

      - name: Read version from gradle.properties
        id: version
        shell: bash
        run: |
          if [ ! -f gradle.properties ]; then
            echo "gradle.properties not found"; exit 1
          fi
          # Grab the first mcengine*.version= line (adjust the prefix if needed)
          version=$(grep -E '^(mcengine.*\.version)=' gradle.properties | head -n1 | cut -d'=' -f2- | tr -d '[:space:]')
          if [ -z "$version" ]; then
            echo "Could not detect version from gradle.properties"; exit 1
          fi
          # Clean tag to be Git-safe
          tag=$(echo "$version" | tr -cd '[:alnum:]._-')
          echo "Detected version: $version"
          echo "Clean tag: $tag"
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Make gradlew executable (if exists)
        run: |
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
          fi

      - name: Build artifacts
        run: |
          if [ -f ./gradlew ] && [ -f ./gradle/wrapper/gradle-wrapper.jar ]; then
            ./gradlew --no-daemon build
          else
            echo "Gradle wrapper not found. Falling back to system Gradle."
            gradle build
          fi
        env:
          USER_GIT_NAME: ${{ github.actor }}
          USER_GITHUB_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Publish to GitHub Packages
        id: publish
        run: |
          if [ -f ./gradlew ] && [ -f ./gradle/wrapper/gradle-wrapper.jar ]; then
            ./gradlew --no-daemon publish
          else
            echo "Gradle wrapper not found. Falling back to system Gradle."
            gradle publish
          fi
        env:
          USER_GIT_NAME: ${{ github.actor }}
          USER_GITHUB_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}
          REPO_NAME: ${{ inputs.repo-name }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Collect JARs for release upload
        id: collect
        run: |
          mkdir -p upload
          if [ -d build/libs ]; then
            find build/libs/ -name "*.jar" -type f -exec cp {} upload/ \;
          fi
          echo "files<<EOF" >> $GITHUB_OUTPUT
          find upload -type f || true >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create tag & GitHub Release
        if: success()
        run: |
          tag="${{ steps.version.outputs.tag }}"
          body="Automated release for version ${tag}"

          git config user.name "agent-mcengine"
          git config user.email "agent-mcengine@users.noreply.github.com"

          # Create and push tag if it doesn't already exist
          if git rev-parse -q --verify "refs/tags/$tag" >/dev/null; then
            echo "Tag $tag already exists locally."
          else
            git tag "$tag"
          fi

          if git ls-remote --tags origin | grep -q "refs/tags/$tag$"; then
            echo "Tag $tag already exists on origin."
          else
            git push origin "$tag"
          fi

          # Create (or idempotently attempt) the release
          http_status=$(curl -s -o /tmp/release.json -w "%{http_code}" -X POST \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -H "Authorization: token ${{ secrets.USER_GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "tag_name": "$tag",
            "name": "$tag",
            "body": "$body",
            "draft": false,
            "prerelease": false
          }
          EOF
          )
          echo "Release creation HTTP status: $http_status"
          # If it's 422 (already exists), continue; otherwise fail on unexpected 4xx/5xx
          if [ "$http_status" -ge 400 ] && [ "$http_status" -ne 422 ]; then
            echo "Release API error:"; cat /tmp/release.json; exit 1
          fi

      - name: Upload JARs to GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            Includes extension JAR(s) from build/libs/.
          files: |
            upload/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}
